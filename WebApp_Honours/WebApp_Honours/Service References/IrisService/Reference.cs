//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApp_Honours.IrisService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lecture", Namespace="http://schemas.datacontract.org/2004/07/IrisService")]
    [System.SerializableAttribute()]
    public partial class Lecture : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttendanceDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LecturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModuleCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttendanceDate {
            get {
                return this.AttendanceDateField;
            }
            set {
                if ((object.ReferenceEquals(this.AttendanceDateField, value) != true)) {
                    this.AttendanceDateField = value;
                    this.RaisePropertyChanged("AttendanceDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lecturer {
            get {
                return this.LecturerField;
            }
            set {
                if ((object.ReferenceEquals(this.LecturerField, value) != true)) {
                    this.LecturerField = value;
                    this.RaisePropertyChanged("Lecturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleCode {
            get {
                return this.ModuleCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModuleCodeField, value) != true)) {
                    this.ModuleCodeField = value;
                    this.RaisePropertyChanged("ModuleCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IrisService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/loginUser", ReplyAction="http://tempuri.org/IService1/loginUserResponse")]
        int loginUser(string studentNum, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/loginUser", ReplyAction="http://tempuri.org/IService1/loginUserResponse")]
        System.Threading.Tasks.Task<int> loginUserAsync(string studentNum, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startEnrolment", ReplyAction="http://tempuri.org/IService1/startEnrolmentResponse")]
        bool startEnrolment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startEnrolment", ReplyAction="http://tempuri.org/IService1/startEnrolmentResponse")]
        System.Threading.Tasks.Task<bool> startEnrolmentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/endEnrolment", ReplyAction="http://tempuri.org/IService1/endEnrolmentResponse")]
        bool endEnrolment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/endEnrolment", ReplyAction="http://tempuri.org/IService1/endEnrolmentResponse")]
        System.Threading.Tasks.Task<bool> endEnrolmentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEnrolmentStatus", ReplyAction="http://tempuri.org/IService1/getEnrolmentStatusResponse")]
        bool getEnrolmentStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEnrolmentStatus", ReplyAction="http://tempuri.org/IService1/getEnrolmentStatusResponse")]
        System.Threading.Tasks.Task<bool> getEnrolmentStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/enrolUser", ReplyAction="http://tempuri.org/IService1/enrolUserResponse")]
        int enrolUser(string studentNum, string name, string surname, string password, string type, string cardUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/enrolUser", ReplyAction="http://tempuri.org/IService1/enrolUserResponse")]
        System.Threading.Tasks.Task<int> enrolUserAsync(string studentNum, string name, string surname, string password, string type, string cardUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/enrolUserIris", ReplyAction="http://tempuri.org/IService1/enrolUserIrisResponse")]
        int enrolUserIris(string cardUID, string irisHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/enrolUserIris", ReplyAction="http://tempuri.org/IService1/enrolUserIrisResponse")]
        System.Threading.Tasks.Task<int> enrolUserIrisAsync(string cardUID, string irisHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkEnrolmentCompletion", ReplyAction="http://tempuri.org/IService1/checkEnrolmentCompletionResponse")]
        string checkEnrolmentCompletion(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkEnrolmentCompletion", ReplyAction="http://tempuri.org/IService1/checkEnrolmentCompletionResponse")]
        System.Threading.Tasks.Task<string> checkEnrolmentCompletionAsync(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/takeAttendance", ReplyAction="http://tempuri.org/IService1/takeAttendanceResponse")]
        int takeAttendance(string cardUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/takeAttendance", ReplyAction="http://tempuri.org/IService1/takeAttendanceResponse")]
        System.Threading.Tasks.Task<int> takeAttendanceAsync(string cardUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateStudentAttendance", ReplyAction="http://tempuri.org/IService1/updateStudentAttendanceResponse")]
        void updateStudentAttendance(string studentNum, string attendance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateStudentAttendance", ReplyAction="http://tempuri.org/IService1/updateStudentAttendanceResponse")]
        System.Threading.Tasks.Task updateStudentAttendanceAsync(string studentNum, string attendance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doesUserExist", ReplyAction="http://tempuri.org/IService1/doesUserExistResponse")]
        bool doesUserExist(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doesUserExist", ReplyAction="http://tempuri.org/IService1/doesUserExistResponse")]
        System.Threading.Tasks.Task<bool> doesUserExistAsync(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deactivateUser", ReplyAction="http://tempuri.org/IService1/deactivateUserResponse")]
        void deactivateUser(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deactivateUser", ReplyAction="http://tempuri.org/IService1/deactivateUserResponse")]
        System.Threading.Tasks.Task deactivateUserAsync(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeUser", ReplyAction="http://tempuri.org/IService1/removeUserResponse")]
        void removeUser(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeUser", ReplyAction="http://tempuri.org/IService1/removeUserResponse")]
        System.Threading.Tasks.Task removeUserAsync(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAttendance", ReplyAction="http://tempuri.org/IService1/getAttendanceResponse")]
        string[] getAttendance();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAttendance", ReplyAction="http://tempuri.org/IService1/getAttendanceResponse")]
        System.Threading.Tasks.Task<string[]> getAttendanceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEnrolledStudents", ReplyAction="http://tempuri.org/IService1/getEnrolledStudentsResponse")]
        string[] getEnrolledStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEnrolledStudents", ReplyAction="http://tempuri.org/IService1/getEnrolledStudentsResponse")]
        System.Threading.Tasks.Task<string[]> getEnrolledStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStudents", ReplyAction="http://tempuri.org/IService1/getStudentsResponse")]
        string[] getStudents(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStudents", ReplyAction="http://tempuri.org/IService1/getStudentsResponse")]
        System.Threading.Tasks.Task<string[]> getStudentsAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDates", ReplyAction="http://tempuri.org/IService1/getDatesResponse")]
        string[] getDates(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDates", ReplyAction="http://tempuri.org/IService1/getDatesResponse")]
        System.Threading.Tasks.Task<string[]> getDatesAsync(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLectures", ReplyAction="http://tempuri.org/IService1/getLecturesResponse")]
        WebApp_Honours.IrisService.Lecture[] getLectures(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLectures", ReplyAction="http://tempuri.org/IService1/getLecturesResponse")]
        System.Threading.Tasks.Task<WebApp_Honours.IrisService.Lecture[]> getLecturesAsync(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStudentLectures", ReplyAction="http://tempuri.org/IService1/getStudentLecturesResponse")]
        WebApp_Honours.IrisService.Lecture[] getStudentLectures(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStudentLectures", ReplyAction="http://tempuri.org/IService1/getStudentLecturesResponse")]
        System.Threading.Tasks.Task<WebApp_Honours.IrisService.Lecture[]> getStudentLecturesAsync(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startLecture", ReplyAction="http://tempuri.org/IService1/startLectureResponse")]
        void startLecture(string moduleCode, string lectureName, string lecturerStudentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startLecture", ReplyAction="http://tempuri.org/IService1/startLectureResponse")]
        System.Threading.Tasks.Task startLectureAsync(string moduleCode, string lectureName, string lecturerStudentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkStudentLatestLecture", ReplyAction="http://tempuri.org/IService1/checkStudentLatestLectureResponse")]
        int checkStudentLatestLecture(string studentNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkStudentLatestLecture", ReplyAction="http://tempuri.org/IService1/checkStudentLatestLectureResponse")]
        System.Threading.Tasks.Task<int> checkStudentLatestLectureAsync(string studentNum);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WebApp_Honours.IrisService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebApp_Honours.IrisService.IService1>, WebApp_Honours.IrisService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int loginUser(string studentNum, string password) {
            return base.Channel.loginUser(studentNum, password);
        }
        
        public System.Threading.Tasks.Task<int> loginUserAsync(string studentNum, string password) {
            return base.Channel.loginUserAsync(studentNum, password);
        }
        
        public bool startEnrolment() {
            return base.Channel.startEnrolment();
        }
        
        public System.Threading.Tasks.Task<bool> startEnrolmentAsync() {
            return base.Channel.startEnrolmentAsync();
        }
        
        public bool endEnrolment() {
            return base.Channel.endEnrolment();
        }
        
        public System.Threading.Tasks.Task<bool> endEnrolmentAsync() {
            return base.Channel.endEnrolmentAsync();
        }
        
        public bool getEnrolmentStatus() {
            return base.Channel.getEnrolmentStatus();
        }
        
        public System.Threading.Tasks.Task<bool> getEnrolmentStatusAsync() {
            return base.Channel.getEnrolmentStatusAsync();
        }
        
        public int enrolUser(string studentNum, string name, string surname, string password, string type, string cardUID) {
            return base.Channel.enrolUser(studentNum, name, surname, password, type, cardUID);
        }
        
        public System.Threading.Tasks.Task<int> enrolUserAsync(string studentNum, string name, string surname, string password, string type, string cardUID) {
            return base.Channel.enrolUserAsync(studentNum, name, surname, password, type, cardUID);
        }
        
        public int enrolUserIris(string cardUID, string irisHash) {
            return base.Channel.enrolUserIris(cardUID, irisHash);
        }
        
        public System.Threading.Tasks.Task<int> enrolUserIrisAsync(string cardUID, string irisHash) {
            return base.Channel.enrolUserIrisAsync(cardUID, irisHash);
        }
        
        public string checkEnrolmentCompletion(string studentNum) {
            return base.Channel.checkEnrolmentCompletion(studentNum);
        }
        
        public System.Threading.Tasks.Task<string> checkEnrolmentCompletionAsync(string studentNum) {
            return base.Channel.checkEnrolmentCompletionAsync(studentNum);
        }
        
        public int takeAttendance(string cardUID) {
            return base.Channel.takeAttendance(cardUID);
        }
        
        public System.Threading.Tasks.Task<int> takeAttendanceAsync(string cardUID) {
            return base.Channel.takeAttendanceAsync(cardUID);
        }
        
        public void updateStudentAttendance(string studentNum, string attendance) {
            base.Channel.updateStudentAttendance(studentNum, attendance);
        }
        
        public System.Threading.Tasks.Task updateStudentAttendanceAsync(string studentNum, string attendance) {
            return base.Channel.updateStudentAttendanceAsync(studentNum, attendance);
        }
        
        public bool doesUserExist(string studentNum) {
            return base.Channel.doesUserExist(studentNum);
        }
        
        public System.Threading.Tasks.Task<bool> doesUserExistAsync(string studentNum) {
            return base.Channel.doesUserExistAsync(studentNum);
        }
        
        public void deactivateUser(string studentNum) {
            base.Channel.deactivateUser(studentNum);
        }
        
        public System.Threading.Tasks.Task deactivateUserAsync(string studentNum) {
            return base.Channel.deactivateUserAsync(studentNum);
        }
        
        public void removeUser(string studentNum) {
            base.Channel.removeUser(studentNum);
        }
        
        public System.Threading.Tasks.Task removeUserAsync(string studentNum) {
            return base.Channel.removeUserAsync(studentNum);
        }
        
        public string[] getAttendance() {
            return base.Channel.getAttendance();
        }
        
        public System.Threading.Tasks.Task<string[]> getAttendanceAsync() {
            return base.Channel.getAttendanceAsync();
        }
        
        public string[] getEnrolledStudents() {
            return base.Channel.getEnrolledStudents();
        }
        
        public System.Threading.Tasks.Task<string[]> getEnrolledStudentsAsync() {
            return base.Channel.getEnrolledStudentsAsync();
        }
        
        public string[] getStudents(string date) {
            return base.Channel.getStudents(date);
        }
        
        public System.Threading.Tasks.Task<string[]> getStudentsAsync(string date) {
            return base.Channel.getStudentsAsync(date);
        }
        
        public string[] getDates(string studentNum) {
            return base.Channel.getDates(studentNum);
        }
        
        public System.Threading.Tasks.Task<string[]> getDatesAsync(string studentNum) {
            return base.Channel.getDatesAsync(studentNum);
        }
        
        public WebApp_Honours.IrisService.Lecture[] getLectures(string studentNum) {
            return base.Channel.getLectures(studentNum);
        }
        
        public System.Threading.Tasks.Task<WebApp_Honours.IrisService.Lecture[]> getLecturesAsync(string studentNum) {
            return base.Channel.getLecturesAsync(studentNum);
        }
        
        public WebApp_Honours.IrisService.Lecture[] getStudentLectures(string studentNum) {
            return base.Channel.getStudentLectures(studentNum);
        }
        
        public System.Threading.Tasks.Task<WebApp_Honours.IrisService.Lecture[]> getStudentLecturesAsync(string studentNum) {
            return base.Channel.getStudentLecturesAsync(studentNum);
        }
        
        public void startLecture(string moduleCode, string lectureName, string lecturerStudentNum) {
            base.Channel.startLecture(moduleCode, lectureName, lecturerStudentNum);
        }
        
        public System.Threading.Tasks.Task startLectureAsync(string moduleCode, string lectureName, string lecturerStudentNum) {
            return base.Channel.startLectureAsync(moduleCode, lectureName, lecturerStudentNum);
        }
        
        public int checkStudentLatestLecture(string studentNum) {
            return base.Channel.checkStudentLatestLecture(studentNum);
        }
        
        public System.Threading.Tasks.Task<int> checkStudentLatestLectureAsync(string studentNum) {
            return base.Channel.checkStudentLatestLectureAsync(studentNum);
        }
    }
}
